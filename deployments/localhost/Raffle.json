{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RaffleWinnerRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa5ad8333585829f0b7162d1737a505a081010378c26bc45584d10e8d87be4c5b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1102494",
    "logsBloom": "0x
    "blockHash": "0x1081b3c6bdc162aad32be4a31060780532489427390a4972f25cdbd32af3bc60",
    "transactionHash": "0xa5ad8333585829f0b7162d1737a505a081010378c26bc45584d10e8d87be4c5b",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1102494",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "500000",
    "1",
    "100000000000000000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "144b5dd2ab6561df0772919edd4c09e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RaffleWinnerRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\r\\n\\r\\nerror Raffle__NotEnoughETH();\\r\\nerror Raffle__TransferFailed();\\r\\nerror Raffle__NotOpen();\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatible {\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n\\r\\n    // Random number variables\\r\\n    VRFCoordinatorV2Interface private immutable vrfCoordinator;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    bytes32 private immutable i_keyHash;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint64 private immutable i_subId;\\r\\n\\r\\n    // Upkeep variables\\r\\n    uint256 private immutable i_interval;\\r\\n    uint256 private s_lastTimestamp;\\r\\n\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address[] private s_players;\\r\\n    address public owner;\\r\\n    address payable private s_lastWinner;\\r\\n    RaffleState private raffleState;\\r\\n\\r\\n    event RaffleEnter(address indexed player);\\r\\n    event WinnerPicked(address indexed player);\\r\\n    event RaffleWinnerRequested(uint256 indexed requestId);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Restricted access!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorAddress,\\r\\n        bytes32 keyHash,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint64 subId,\\r\\n        uint256 entranceFee,\\r\\n        uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorAddress) {\\r\\n        vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorAddress);\\r\\n        i_keyHash = keyHash;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        i_subId = subId;\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_interval = interval;\\r\\n        s_lastTimestamp = block.timestamp;\\r\\n        raffleState = RaffleState.OPEN;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function enterRaffle() public payable {\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert Raffle__NotEnoughETH();\\r\\n        }\\r\\n        if (raffleState == RaffleState.CALCULATING) {\\r\\n            revert Raffle__NotOpen();\\r\\n        }\\r\\n        s_players.push(msg.sender);\\r\\n        emit RaffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /*chekcData*/\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bool upkeepNeeeded,\\r\\n            bytes memory /*performData*/\\r\\n        )\\r\\n    {\\r\\n        bool hasPlayers = s_players.length > 0;\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        bool timePassed = (block.timestamp - s_lastTimestamp) > i_interval;\\r\\n        upkeepNeeeded = (hasPlayers && hasBalance && timePassed);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(\\r\\n        bytes calldata /*performData*/\\r\\n    ) external override {\\r\\n        raffleState = RaffleState.CALCULATING;\\r\\n        uint256 requestId = vrfCoordinator.requestRandomWords(\\r\\n            i_keyHash,\\r\\n            i_subId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RaffleWinnerRequested(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256, uint256[] memory randomWords)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        uint256 randomNumber = randomWords[0] % s_players.length;\\r\\n        s_lastWinner = payable(s_players[randomNumber]);\\r\\n        (bool success, ) = s_lastWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert Raffle__TransferFailed();\\r\\n        }\\r\\n        s_lastTimestamp = block.timestamp;\\r\\n        raffleState = RaffleState.OPEN;\\r\\n        s_players = new address[](0);\\r\\n        emit WinnerPicked(s_lastWinner);\\r\\n    }\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n\\r\\n    function getLastWinner() public view returns (address) {\\r\\n        return s_lastWinner;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleState) {\\r\\n        return raffleState;\\r\\n    }\\r\\n\\r\\n    function getLatestTimestamp() public view returns (uint256) {\\r\\n        return s_lastTimestamp;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x382dadaabceb5ca5a6cca66df5f135c643e40fb2fb4cdfcd43b1af6408b17fa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620015fa380380620015fa8339818101604052810190620000389190620002d5565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508460c081815250508363ffffffff1660e08163ffffffff16815250508267ffffffffffffffff166101008167ffffffffffffffff1681525050816101408181525050806101208181525050426000819055506000600360146101000a81548160ff021916908360018111156200011d576200011c62000371565b5b021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050620003a0565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001a18262000174565b9050919050565b620001b38162000194565b8114620001bf57600080fd5b50565b600081519050620001d381620001a8565b92915050565b6000819050919050565b620001ee81620001d9565b8114620001fa57600080fd5b50565b6000815190506200020e81620001e3565b92915050565b600063ffffffff82169050919050565b6200022f8162000214565b81146200023b57600080fd5b50565b6000815190506200024f8162000224565b92915050565b600067ffffffffffffffff82169050919050565b620002748162000255565b81146200028057600080fd5b50565b600081519050620002948162000269565b92915050565b6000819050919050565b620002af816200029a565b8114620002bb57600080fd5b50565b600081519050620002cf81620002a4565b92915050565b60008060008060008060c08789031215620002f557620002f46200016f565b5b60006200030589828a01620001c2565b96505060206200031889828a01620001fd565b95505060406200032b89828a016200023e565b94505060606200033e89828a0162000283565b93505060806200035189828a01620002be565b92505060a06200036489828a01620002be565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516111f1620004096000396000818161027e015261037b01526000610679015260006105740152600061059701526000610553015260006105170152600081816102bb015261030f01526111f16000f3fe60806040526004361061009c5760003560e01c80636e04ff0d116100645780636e04ff0d146101535780638da5cb5b14610191578063e55ae4e8146101bc578063f43b52cb146101f9578063f88649a114610224578063fd6673f51461024f5761009c565b806309bc33a7146100a1578063115cbaf5146100cc5780631fe543e3146100f75780632cfcc539146101205780634585e33b1461012a575b600080fd5b3480156100ad57600080fd5b506100b661027a565b6040516100c39190610aa7565b60405180910390f35b3480156100d857600080fd5b506100e16102a2565b6040516100ee9190610b39565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610ced565b6102b9565b005b610128610379565b005b34801561013657600080fd5b50610151600480360381019061014c9190610da4565b6104e8565b005b34801561015f57600080fd5b5061017a60048036038101906101759190610da4565b61065e565b604051610188929190610e94565b60405180910390f35b34801561019d57600080fd5b506101a66106c8565b6040516101b39190610f05565b60405180910390f35b3480156101c857600080fd5b506101e360048036038101906101de9190610f20565b6106ee565b6040516101f09190610f05565b60405180910390f35b34801561020557600080fd5b5061020e610736565b60405161021b9190610aa7565b60405180910390f35b34801561023057600080fd5b5061023961073f565b6040516102469190610f05565b60405180910390f35b34801561025b57600080fd5b50610264610769565b6040516102719190610aa7565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036b57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610362929190610f4d565b60405180910390fd5b6103758282610776565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156103d3576040517f9894879b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001808111156103e6576103e5610ac2565b5b600360149054906101000a900460ff16600181111561040857610407610ac2565b5b1415610440576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6001600360146101000a81548160ff0219169083600181111561050e5761050d610ac2565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105d8959493929190610fee565b602060405180830381600087803b1580156105f257600080fd5b505af1158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a9190611056565b9050807f4549df58a7d250647f89fe30531ce89d7a67e57126a474379b9e64af2678520360405160405180910390a2505050565b600060606000806001805490501190506000804711905060007f0000000000000000000000000000000000000000000000000000000000000000600054426106a691906110b2565b1190508280156106b35750815b80156106bc5750805b94505050509250929050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060018281548110610704576107036110e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008054905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600180549050905090565b600060018054905082600081518110610792576107916110e6565b5b60200260200101516107a49190611144565b9050600181815481106107ba576107b96110e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161086d906111a6565b60006040518083038185875af1925050503d80600081146108aa576040519150601f19603f3d011682016040523d82523d6000602084013e6108af565b606091505b50509050806108ea576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426000819055506000600360146101000a81548160ff0219169083600181111561091757610916610ac2565b5b0217905550600067ffffffffffffffff81111561093757610936610baa565b5b6040519080825280602002602001820160405280156109655781602001602082028036833780820191505090505b506001908051906020019061097b9291906109e7565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050565b828054828255906000526020600020908101928215610a60579160200282015b82811115610a5f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a07565b5b509050610a6d9190610a71565b5090565b5b80821115610a8a576000816000905550600101610a72565b5090565b6000819050919050565b610aa181610a8e565b82525050565b6000602082019050610abc6000830184610a98565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610b0257610b01610ac2565b5b50565b6000819050610b1382610af1565b919050565b6000610b2382610b05565b9050919050565b610b3381610b18565b82525050565b6000602082019050610b4e6000830184610b2a565b92915050565b6000604051905090565b600080fd5b600080fd5b610b7181610a8e565b8114610b7c57600080fd5b50565b600081359050610b8e81610b68565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610be282610b99565b810181811067ffffffffffffffff82111715610c0157610c00610baa565b5b80604052505050565b6000610c14610b54565b9050610c208282610bd9565b919050565b600067ffffffffffffffff821115610c4057610c3f610baa565b5b602082029050602081019050919050565b600080fd5b6000610c69610c6484610c25565b610c0a565b90508083825260208201905060208402830185811115610c8c57610c8b610c51565b5b835b81811015610cb55780610ca18882610b7f565b845260208401935050602081019050610c8e565b5050509392505050565b600082601f830112610cd457610cd3610b94565b5b8135610ce4848260208601610c56565b91505092915050565b60008060408385031215610d0457610d03610b5e565b5b6000610d1285828601610b7f565b925050602083013567ffffffffffffffff811115610d3357610d32610b63565b5b610d3f85828601610cbf565b9150509250929050565b600080fd5b60008083601f840112610d6457610d63610b94565b5b8235905067ffffffffffffffff811115610d8157610d80610d49565b5b602083019150836001820283011115610d9d57610d9c610c51565b5b9250929050565b60008060208385031215610dbb57610dba610b5e565b5b600083013567ffffffffffffffff811115610dd957610dd8610b63565b5b610de585828601610d4e565b92509250509250929050565b60008115159050919050565b610e0681610df1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e46578082015181840152602081019050610e2b565b83811115610e55576000848401525b50505050565b6000610e6682610e0c565b610e708185610e17565b9350610e80818560208601610e28565b610e8981610b99565b840191505092915050565b6000604082019050610ea96000830185610dfd565b8181036020830152610ebb8184610e5b565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eef82610ec4565b9050919050565b610eff81610ee4565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b600060208284031215610f3657610f35610b5e565b5b6000610f4484828501610b7f565b91505092915050565b6000604082019050610f626000830185610ef6565b610f6f6020830184610ef6565b9392505050565b6000819050919050565b610f8981610f76565b82525050565b600067ffffffffffffffff82169050919050565b610fac81610f8f565b82525050565b600061ffff82169050919050565b610fc981610fb2565b82525050565b600063ffffffff82169050919050565b610fe881610fcf565b82525050565b600060a0820190506110036000830188610f80565b6110106020830187610fa3565b61101d6040830186610fc0565b61102a6060830185610fdf565b6110376080830184610fdf565b9695505050505050565b60008151905061105081610b68565b92915050565b60006020828403121561106c5761106b610b5e565b5b600061107a84828501611041565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110bd82610a8e565b91506110c883610a8e565b9250828210156110db576110da611083565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061114f82610a8e565b915061115a83610a8e565b92508261116a57611169611115565b5b828206905092915050565b600081905092915050565b50565b6000611190600083611175565b915061119b82611180565b600082019050919050565b60006111b182611183565b915081905091905056fea2646970667358221220ae34343fdfc9231fb4fe51d7ce0f7009367a652d082b5fc1cdbe63c069a64d5264736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80636e04ff0d116100645780636e04ff0d146101535780638da5cb5b14610191578063e55ae4e8146101bc578063f43b52cb146101f9578063f88649a114610224578063fd6673f51461024f5761009c565b806309bc33a7146100a1578063115cbaf5146100cc5780631fe543e3146100f75780632cfcc539146101205780634585e33b1461012a575b600080fd5b3480156100ad57600080fd5b506100b661027a565b6040516100c39190610aa7565b60405180910390f35b3480156100d857600080fd5b506100e16102a2565b6040516100ee9190610b39565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610ced565b6102b9565b005b610128610379565b005b34801561013657600080fd5b50610151600480360381019061014c9190610da4565b6104e8565b005b34801561015f57600080fd5b5061017a60048036038101906101759190610da4565b61065e565b604051610188929190610e94565b60405180910390f35b34801561019d57600080fd5b506101a66106c8565b6040516101b39190610f05565b60405180910390f35b3480156101c857600080fd5b506101e360048036038101906101de9190610f20565b6106ee565b6040516101f09190610f05565b60405180910390f35b34801561020557600080fd5b5061020e610736565b60405161021b9190610aa7565b60405180910390f35b34801561023057600080fd5b5061023961073f565b6040516102469190610f05565b60405180910390f35b34801561025b57600080fd5b50610264610769565b6040516102719190610aa7565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036b57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610362929190610f4d565b60405180910390fd5b6103758282610776565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156103d3576040517f9894879b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001808111156103e6576103e5610ac2565b5b600360149054906101000a900460ff16600181111561040857610407610ac2565b5b1415610440576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6001600360146101000a81548160ff0219169083600181111561050e5761050d610ac2565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105d8959493929190610fee565b602060405180830381600087803b1580156105f257600080fd5b505af1158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a9190611056565b9050807f4549df58a7d250647f89fe30531ce89d7a67e57126a474379b9e64af2678520360405160405180910390a2505050565b600060606000806001805490501190506000804711905060007f0000000000000000000000000000000000000000000000000000000000000000600054426106a691906110b2565b1190508280156106b35750815b80156106bc5750805b94505050509250929050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060018281548110610704576107036110e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008054905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600180549050905090565b600060018054905082600081518110610792576107916110e6565b5b60200260200101516107a49190611144565b9050600181815481106107ba576107b96110e6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161086d906111a6565b60006040518083038185875af1925050503d80600081146108aa576040519150601f19603f3d011682016040523d82523d6000602084013e6108af565b606091505b50509050806108ea576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426000819055506000600360146101000a81548160ff0219169083600181111561091757610916610ac2565b5b0217905550600067ffffffffffffffff81111561093757610936610baa565b5b6040519080825280602002602001820160405280156109655781602001602082028036833780820191505090505b506001908051906020019061097b9291906109e7565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050565b828054828255906000526020600020908101928215610a60579160200282015b82811115610a5f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a07565b5b509050610a6d9190610a71565b5090565b5b80821115610a8a576000816000905550600101610a72565b5090565b6000819050919050565b610aa181610a8e565b82525050565b6000602082019050610abc6000830184610a98565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610b0257610b01610ac2565b5b50565b6000819050610b1382610af1565b919050565b6000610b2382610b05565b9050919050565b610b3381610b18565b82525050565b6000602082019050610b4e6000830184610b2a565b92915050565b6000604051905090565b600080fd5b600080fd5b610b7181610a8e565b8114610b7c57600080fd5b50565b600081359050610b8e81610b68565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610be282610b99565b810181811067ffffffffffffffff82111715610c0157610c00610baa565b5b80604052505050565b6000610c14610b54565b9050610c208282610bd9565b919050565b600067ffffffffffffffff821115610c4057610c3f610baa565b5b602082029050602081019050919050565b600080fd5b6000610c69610c6484610c25565b610c0a565b90508083825260208201905060208402830185811115610c8c57610c8b610c51565b5b835b81811015610cb55780610ca18882610b7f565b845260208401935050602081019050610c8e565b5050509392505050565b600082601f830112610cd457610cd3610b94565b5b8135610ce4848260208601610c56565b91505092915050565b60008060408385031215610d0457610d03610b5e565b5b6000610d1285828601610b7f565b925050602083013567ffffffffffffffff811115610d3357610d32610b63565b5b610d3f85828601610cbf565b9150509250929050565b600080fd5b60008083601f840112610d6457610d63610b94565b5b8235905067ffffffffffffffff811115610d8157610d80610d49565b5b602083019150836001820283011115610d9d57610d9c610c51565b5b9250929050565b60008060208385031215610dbb57610dba610b5e565b5b600083013567ffffffffffffffff811115610dd957610dd8610b63565b5b610de585828601610d4e565b92509250509250929050565b60008115159050919050565b610e0681610df1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e46578082015181840152602081019050610e2b565b83811115610e55576000848401525b50505050565b6000610e6682610e0c565b610e708185610e17565b9350610e80818560208601610e28565b610e8981610b99565b840191505092915050565b6000604082019050610ea96000830185610dfd565b8181036020830152610ebb8184610e5b565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eef82610ec4565b9050919050565b610eff81610ee4565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b600060208284031215610f3657610f35610b5e565b5b6000610f4484828501610b7f565b91505092915050565b6000604082019050610f626000830185610ef6565b610f6f6020830184610ef6565b9392505050565b6000819050919050565b610f8981610f76565b82525050565b600067ffffffffffffffff82169050919050565b610fac81610f8f565b82525050565b600061ffff82169050919050565b610fc981610fb2565b82525050565b600063ffffffff82169050919050565b610fe881610fcf565b82525050565b600060a0820190506110036000830188610f80565b6110106020830187610fa3565b61101d6040830186610fc0565b61102a6060830185610fdf565b6110376080830184610fdf565b9695505050505050565b60008151905061105081610b68565b92915050565b60006020828403121561106c5761106b610b5e565b5b600061107a84828501611041565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110bd82610a8e565b91506110c883610a8e565b9250828210156110db576110da611083565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061114f82610a8e565b915061115a83610a8e565b92508261116a57611169611115565b5b828206905092915050565b600081905092915050565b50565b6000611190600083611175565b915061119b82611180565b600082019050919050565b60006111b182611183565b915081905091905056fea2646970667358221220ae34343fdfc9231fb4fe51d7ce0f7009367a652d082b5fc1cdbe63c069a64d5264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 241,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimestamp",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 246,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 248,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 250,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastWinner",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 253,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "raffleState",
        "offset": 20,
        "slot": "3",
        "type": "t_enum(RaffleState)222"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)222": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}